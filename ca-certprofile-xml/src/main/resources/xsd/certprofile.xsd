<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright (c) 2013 - 2017 Lijun Liao
-->
<xs:schema xmlns="http://xipki.org/ca/xmlprofile/v2"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://xipki.org/ca/xmlprofile/v2"
    elementFormDefault="qualified">
  <!-- root element -->
  <xs:element name="X509Profile" type="X509ProfileType"/>
  <xs:complexType name="X509ProfileType">
    <xs:sequence>
      <xs:element name="appInfo" type="anyType" minOccurs="0"/>
      <xs:element name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            version of the certificate, current support values are v1, v2 and v3
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="signatureAlgorithms" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="algorithm" type="xs:string" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  Signature algorithm name. Algorithms supported by the CA are
                  SHA*withECDSA, SHA*withDSA, SHA*withRSA, SHA*withRSAandMGF1, SHA*withPlainECDSA
                  where * is for 1, 224, 256, 384 and 512,
                  and SHA3-*withECDSA, SHA3-*withDSA, SHA3-*withRSA, SHA3-*withRSAandMGF1
                  where * is for 224, 256, 384 and 512.
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="certLevel" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            valid values are RootCA, SubCA and EndEntity
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="validity" type="xs:string"/>
      <xs:element name="notBeforeTime" type="xs:string">
        <xs:annotation>
          <xs:documentation>
            Format of the notBefore field.
              current: current time
              midnight: mid night, namely 00:00:00 UTC 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="duplicateKey" type="xs:boolean"/>
      <xs:element name="serialNumberInReq" type="xs:boolean"/>
      <xs:element name="specialBehavior" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            some certificate profiles must be processed specially. Currently 
            defined special behavior is gematik_gSMC_K.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parameters" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            current supported parameter is "maxLifetime" for specialBehavior "gematik_gSMC_K"
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="parameter" type="nameValueType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyAlgorithms" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="algorithm" type="algorithmType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="subject">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="incSerialNumber" type="xs:boolean"/>
            <xs:element name="keepRdnOrder" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                  whether the RDNs occurs as in the defined ASN.1 order
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="rdn" type="rdnType" maxOccurs="unbounded"/>
          </xs:sequence>
          <xs:attribute name="duplicateSubjectPermitted" type="xs:boolean" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="extensions" type="extensionsType"/>
      <xs:any namespace="##other" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="raOnly" type="xs:boolean" default="false" use="optional"/>
    <xs:attribute name="maxSize" type="xs:int" use="optional"/>
  </xs:complexType>
  <xs:complexType name="anyType">
    <xs:sequence>
      <xs:any processContents="lax"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="nameValueType">
    <xs:sequence>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="algorithmType">
    <xs:sequence>
      <xs:element name="algorithm" type="oidWithDescType" maxOccurs="unbounded"/>
      <xs:element name="parameters" type="keyParametersType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="rangesType">
    <xs:sequence>
      <xs:element name="range" type="rangeType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="rangeType">
    <xs:attribute name="min" type="xs:int" use="optional"/>
    <xs:attribute name="max" type="xs:int" use="optional"/>
  </xs:complexType>
  <xs:complexType name="rdnType">
    <xs:sequence>
      <xs:element name="type" type="oidWithDescType"/>
      <xs:element name="minLen" type="xs:int" minOccurs="0"/>
      <xs:element name="maxLen" type="xs:int" minOccurs="0"/>
      <xs:element name="stringType" type="stringType" minOccurs="0"/>
      <xs:element name="regex" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="prefix" type="xs:string" minOccurs="0"/>
      <xs:element name="suffix" type="xs:string" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="minOccurs" type="xs:int" default="1" use="optional"/>
    <xs:attribute name="maxOccurs" type="xs:int" default="1" use="optional"/>
    <xs:attribute name="group" type="xs:string" use="optional"/>
  </xs:complexType>
  <xs:simpleType name="directoryStringType">
    <xs:restriction base="xs:normalizedString">
      <xs:enumeration value="teletexString"/>
      <xs:enumeration value="printableString"/>
      <xs:enumeration value="utf8String"/>
      <xs:enumeration value="bmpString"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="stringType">
    <xs:restriction base="xs:normalizedString">
      <xs:enumeration value="teletexString"/>
      <xs:enumeration value="printableString"/>
      <xs:enumeration value="utf8String"/>
      <xs:enumeration value="bmpString"/>
      <xs:enumeration value="ia5String"/>
    </xs:restriction>
  </xs:simpleType>  
  <xs:complexType name="extensionsType">
    <xs:sequence>
      <xs:element name="subjectToSubjectAltNames" type="subjectToSubjectAltNamesType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Specifies how the commonName attributes in subject will be copied to the Extension
            SubjectAltName.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="extension" type="extensionType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="subjectToSubjectAltNamesType">
    <xs:sequence>
      <xs:element name="subjectToSubjectAltName" type="subjectToSubjectAltNameType"
        maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="subjectToSubjectAltNameType">
    <xs:sequence>
      <xs:element name="source" type="oidWithDescType"/>
      <xs:element name="target">
        <xs:complexType>
          <xs:choice>
            <xs:element name="rfc822Name" type="xs:string"/>
            <xs:element name="dnsName" type="xs:string"/>
            <xs:element name="directoryName" type="xs:string"/>
            <xs:element name="uniformResourceIdentifier" type="xs:string"/>
            <xs:element name="ipAddress" type="xs:string"/>
            <xs:element name="registeredID" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="extensionType">
    <xs:annotation>
      <xs:documentation>
        Critical will be considered if both values (true and false) are allowed,
        otherwise it will be ignored
      </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="type" type="oidWithDescType"/>
      <xs:element name="critical" type="xs:boolean"/>
      <xs:element name="value" type="extensionValueType" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="required" type="xs:boolean" use="required"/>
    <xs:attribute name="permittedInRequest" type="xs:boolean" use="required"/>
  </xs:complexType>
  <!-- public key parameters -->
  <xs:complexType name="keyParametersType">
    <xs:complexContent>
      <xs:extension base="anyType"/>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BaseRSAParametersType">
      <xs:sequence>
        <xs:element name="modulusLength" type="rangesType" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  <xs:element name="RSAParameters">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseRSAParametersType">
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="BaseDSAParametersType">
   <xs:sequence>
      <xs:element name="pLength" type="rangesType" minOccurs="0"/>
      <xs:element name="qLength" type="rangesType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="DSAParameters">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseDSAParametersType">
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="DHParameters">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseDSAParametersType">
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="RSAPSSParameters">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="BaseRSAParametersType">
          <xs:sequence>
            <xs:element name="hashAlgorithm" type="oidWithDescType" minOccurs="0"
                maxOccurs="unbounded"/>
            <xs:element name="maskGenAlgorithm" type="oidWithDescType" minOccurs="0"
                maxOccurs="unbounded"/>
            <xs:element name="saltLength" type="xs:int" minOccurs="0"
                maxOccurs="unbounded"/>
            <xs:element name="trailerField" type="xs:int" minOccurs="0"
                maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="ECParameters">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="curves" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="curve" type="oidWithDescType" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="pointEncodings" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="pointEncoding" type="xs:byte" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>
                    first octet of the encoded EC point
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="gostParameters">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="publicKeyParamSet" type="oidWithDescType" minOccurs="0"
            maxOccurs="unbounded"/>
        <xs:element name="digestParamSet" type="oidWithDescType" minOccurs="0"
            maxOccurs="unbounded"/>
        <xs:element name="encryptionParamSet" type="oidWithDescType" minOccurs="0"
            maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <!-- Extensions -->
  <xs:complexType name="extensionValueType">
    <xs:complexContent>
      <xs:extension base="anyType"/>
    </xs:complexContent>
  </xs:complexType>  
  <xs:element name="basicConstraints">
    <xs:complexType>
      <xs:all>
        <xs:element name="pathLen" type="xs:int"/>
      </xs:all>
    </xs:complexType>
  </xs:element>
  <xs:element name="authorityKeyIdentifier">
    <xs:complexType>
      <xs:all>
        <xs:element name="includeIssuerAndSerial" type="xs:boolean"/>
      </xs:all>
    </xs:complexType>
  </xs:element>
  <xs:element name="authorityInfoAccess">
    <xs:complexType>
      <xs:all>
        <xs:element name="includeCaIssuers" type="xs:boolean"/>
        <xs:element name="includeOcsp" type="xs:boolean"/>
      </xs:all>
    </xs:complexType>
  </xs:element>
  <xs:element name="keyUsage">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="usage" type="usageType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="certificatePolicies">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="certificatePolicyInformation" type="certificatePolicyInformationType"
            maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="policyMappings">
    <xs:annotation>
      <xs:documentation>
        Only for CA
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="mapping" type="policyIdMappingType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="nameConstraints">
    <xs:annotation>
      <xs:documentation>
       Only for CA, at least one of permittedSubtrees and excludedSubtrees must be present
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="permittedSubtrees" type="generalSubtreesType" minOccurs="0"/>
        <xs:element name="excludedSubtrees" type="generalSubtreesType" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="policyConstraints">
    <xs:annotation>
      <xs:documentation>
        Only for CA, at least one of requireExplicitPolicy and inhibitPolicyMapping must be present
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="requireExplicitPolicy" type="xs:int" minOccurs="0"/>
        <xs:element name="inhibitPolicyMapping" type="xs:int" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="extendedKeyUsage">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="usage" maxOccurs="unbounded">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="oidWithDescType">
                <xs:attribute name="required" type="xs:boolean" use="required"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="inhibitAnyPolicy">
    <xs:annotation>
      <xs:documentation>Only for CA</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="skipCerts" type="xs:int"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="admissionSyntax">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="admissionAuthority" type="xs:base64Binary" minOccurs="0"/>
        <xs:element name="contentsOfAdmissions" type="admissionsType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="admissionsType">
    <xs:sequence>
      <xs:element name="admissionAuthority" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="namingAuthority" type="namingAuthorityType" minOccurs="0"/>
      <xs:element name="professionInfo" type="professionInfoType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="namingAuthorityType">
    <xs:annotation>
      <xs:documentation>at least one of oid, url and text must be specified</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="oid" type="oidWithDescType" minOccurs="0"/>
      <xs:element name="url" type="xs:string" minOccurs="0"/>
      <xs:element name="text" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="professionInfoType">
    <xs:sequence>
      <xs:element name="namingAuthority" type="namingAuthorityType" minOccurs="0"/>
      <xs:element name="professionOid" type="oidWithDescType" minOccurs="0"
          maxOccurs="unbounded"/>
      <xs:element name="professionItem" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="registrationNumber" minOccurs="0">
        <xs:complexType>
          <xs:choice>
            <xs:element name="regex" type="xs:string"/>
            <xs:element name="constant" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
      <xs:element name="addProfessionInfo" type="xs:base64Binary" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="subjectAltName">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="generalNameType"/>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element name="subjectInfoAccess">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="access" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="accessMethod" type="oidWithDescType"/>
              <xs:element name="accessLocation" type="generalNameType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="validityModel">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="modelId" type="oidWithDescType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="additionalInformation">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="directoryStringType"/>
        <xs:element name="text" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="restriction">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="directoryStringType"/>
        <xs:element name="text" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="privateKeyUsagePeriod">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="validity" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="qcStatements">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="qcStatement" type="qcStatementType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="tlsFeature">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="feature" type="intWithDescType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="qcStatementType">
    <xs:sequence>
      <xs:element name="statementId" type="oidWithDescType"/>
      <xs:element name="statementValue" type="qcStatementValueType" minOccurs="0"/> 
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="qcStatementValueType">
    <xs:choice>
      <xs:element name="constant" type="constantValueType"/>
      <xs:element name="qcRetentionPeriod" type="xs:int"/>
      <xs:element name="qcEuLimitValue" type="qcEuLimitValueType"/>
      <xs:element name="pdsLocations" type="PdsLocationsType"/>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="qcEuLimitValueType">
    <xs:sequence>
      <xs:element name="currency" type="xs:string"/>
      <xs:element name="amount" type="range2Type"/>
      <xs:element name="exponent" type="range2Type"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PdsLocationsType">
    <xs:sequence>
      <xs:element name="pdsLocation" type="PdsLocationType" maxOccurs="99"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PdsLocationType">
    <xs:sequence>
      <xs:element name="url" type="xs:string"/>
      <xs:element name="language" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="authorizationTemplate">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="oidWithDescType"/>
        <xs:element name="accessRights" type="constantValueType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SMIMECapabilities">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="SMIMECapability" maxOccurs="unbounded" />
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="SMIMECapability">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="capabilityID" type="oidWithDescType"/>
        <xs:element name="parameters" minOccurs="0">
          <xs:complexType>
            <xs:choice>
              <xs:element name="integer" type="xs:integer"/>
              <xs:element name="base64Binary"  type="base64BinaryWithDescType"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="biometricInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="biometricTypeType" maxOccurs="unbounded"/>
        <xs:element name="hashAlgorithm" type="oidWithDescType" maxOccurs="unbounded"/>
        <xs:element name="includeSourceDataUri" type="tripleState"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="biometricTypeType">
    <xs:choice>
      <xs:element name="predefined" type="intWithDescType"/>
      <xs:element name="oid" type="oidWithDescType"/>
    </xs:choice>
  </xs:complexType>
  <xs:element name="subjectDirectoryAttributs">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="type" type="oidWithDescType" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="constantExtValue">
    <xs:complexType>
      <xs:complexContent>
         <xs:extension base="base64BinaryWithDescType"/>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="base64BinaryWithDescType">
    <xs:simpleContent>
      <xs:extension base="xs:base64Binary">
        <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <!-- general types -->
  <xs:complexType name="range2Type">
    <xs:attribute name="min" type="xs:int" use="required"/>
    <xs:attribute name="max" type="xs:int" use="required"/>
  </xs:complexType>  
  <xs:complexType name="constantValueType">
    <xs:simpleContent>
      <xs:extension base="xs:base64Binary">
     <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="generalNameType">
    <xs:all>
      <xs:element name="rfc822Name" type="xs:string" minOccurs="0"/>
      <xs:element name="dnsName" type="xs:string" minOccurs="0"/>
      <xs:element name="directoryName" type="xs:string" minOccurs="0"/>
      <xs:element name="ediPartyName" type="xs:string" minOccurs="0"/>
      <xs:element name="uniformResourceIdentifier" type="xs:string" minOccurs="0"/>
      <xs:element name="ipAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="registeredID" type="xs:string" minOccurs="0"/>
      <xs:element name="otherName" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="type" type="oidWithDescType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
  </xs:complexType>
  <xs:complexType name="policyIdMappingType">
    <xs:sequence>
      <xs:element name="issuerDomainPolicy" type="oidWithDescType"/>
      <xs:element name="subjectDomainPolicy" type="oidWithDescType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generalSubtreesType">
    <xs:sequence>
      <xs:element name="base" type="generalSubtreeBaseType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generalSubtreeBaseType">
    <xs:choice>
      <xs:element name="rfc822Name" type="xs:string"/>
      <xs:element name="dnsName" type="xs:string"/>
      <xs:element name="directoryName" type="xs:string"/>
      <xs:element name="uri" type="xs:string"/>
      <xs:element name="ipAddress" type="xs:string"/>
    </xs:choice>
    <xs:attribute name="minimum" type="xs:int" use="optional"/>
    <xs:attribute name="maximum" type="xs:int" use="optional"/>
  </xs:complexType>
  <xs:complexType name="certificatePolicyInformationType">
    <xs:sequence>
      <xs:element name="policyIdentifier" type="oidWithDescType"/>
      <xs:element name="policyQualifiers" minOccurs="0">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="cpsUri" type="xs:string"/>
            <xs:element name="userNotice" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="oidWithDescType">
    <xs:simpleContent>
      <xs:extension base="oidType">
        <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="stringWithDescType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="intWithDescType">
    <xs:simpleContent>
      <xs:extension base="xs:int">
        <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="usageType">
    <xs:simpleContent>
      <xs:extension base="keyUsageEnum">
        <xs:attribute name="required" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="oidType">
    <xs:restriction base="xs:token">
      <xs:pattern value="\d+(\.\d+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="keyUsageEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="digitalSignature"/>
      <xs:enumeration value="contentCommitment"/>
      <xs:enumeration value="keyEncipherment"/>
      <xs:enumeration value="dataEncipherment"/>
      <xs:enumeration value="keyAgreement"/>
      <xs:enumeration value="keyCertSign"/>
      <xs:enumeration value="crlSign"/>
      <xs:enumeration value="encipherOnly"/>
      <xs:enumeration value="decipherOnly"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="tripleState">
    <xs:restriction base="xs:string">
      <xs:enumeration value="required"/>
      <xs:enumeration value="optional"/>
      <xs:enumeration value="forbidden"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
