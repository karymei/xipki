printUsage = "false"
argsValid = "false"
errMsg = ""

if { "$1" equals "" } {
  printUsage = "true"
  argsValid = "true"
} {
  if { "$1" equals "help" } {
    printUsage = "true"
    argsValid = "true"
  } {
    if { "$1" equals "-l" } {
      HASH = $2
      TOKEN_TYPE = $3
      SIG_TYPE = $4
      KEYSPEC =$5
    } {
      HASH = $1
      TOKEN_TYPE = $2
      SIG_TYPE = $3
      KEYSPEC =$4
    }

   list = [PKCS11 PKCS12]; each ($list) {
     if { "$TOKEN_TYPE" equals $it } {
       argsValid = "true"
     }
   }

    if { "$argsValid" equals "false" } {
      errMsg = "invalid TOKEN_TYPE $TOKEN_TYPE"
    } {
      argsValid = "false"

      list = [RSA RSAPSS EC PLAINEC DSA]; each ($list) {
        if { "$SIG_TYPE" equals $it } {
          argsValid = "true"
        }
      }
    }

    if { "$argsValid" equals "false" } {
      errMsg = "invalid SIG_TYPE $SIG_TYPE"
    } {
      argsValid = "false"

      if { "$SIG_TYPE" equals "PLAINEC" } {
        list = [SHA1 SHA256 SHA384 SHA512]; each ($list) {
          if { "$HASH" equals $it } {
            argsValid = "true"
          }
        }

        if { "$argsValid" equals "false" } {
          errMsg = "invalid combination $HASH and $SIG_TYPE"
        }
      } {
        list = [SHA1 SHA256 SHA384 SHA512 SHA3-224 SHA3-256 SHA3-384 SHA3-512]; each ($list) {
          if { "$HASH" equals $it } {
            argsValid = "true"
          }
        }
      }
    }

    if { "$argsValid" equals "false" } {
      if { "$errMsg" equals ""} {
        errMsg = "invalid HASH $HASH"
      }
    }

  }
}

if { $argsValid equals "false" } {
  echo "$errMsg"
  echo ""
  printUsage = "true"
}
if { $printUsage equals "true" } {
  echo "Usage: "
  echo ""
  echo "source file:./xipki/qa/lifecycle.script [option] <hash algo> <token type> <signature type> [<keyspec>]"
  echo "    hash algo:       SHA1, SHA224, SHA256, SHA384, SHA512"
  echo "                     SHA3-224, SHA3-256, SHA3-384, SHA3-512"
  echo "                     The SHA3 algorithms are not for PLAINEC."
  echo "    token type:      PKCS11, PKCS12"
  echo "    signature type:  RSA, RSAPSS, EC, PLAINEC, DSA"
  echo "    keyspec:         keysize for signature types RSA, RSAPSS and DSA,"
  echo "                     curve name for signature types EC and PLAINEC"
  echo "options"
  echo "    -l               configure CAs using command 'load-conf'"
} {
  source file:./xipki/qa/qa.d/prepare-keys.script

  ## Prepare OCSP responder configuration
  xi:copy-file -f \
    xipki/ocsp-config/ocsp-responder.xml-template \
    xipki/ocsp-config/ocsp-responder.xml

  xi:replace --old "REPLACEME-TOKENTYPE" --new "$TOKEN_TYPE" \
    xipki/ocsp-config/ocsp-responder.xml

  xi:replace --old "REPLACEME-TOKENKEY" --new "$OCSP_KEYCONF" \
    xipki/ocsp-config/ocsp-responder.xml

  xi:replace --old "REPLACEME-SIGALGO" --new "$SIGALGO" \
    xipki/ocsp-config/ocsp-responder.xml

  ## CA client configuration
  xi:copy-file -f xipki/client-config/ca-client.xml-template \
    xipki/client-config/ca-client.xml

  xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
    xipki/client-config/ca-client.xml

  ## Prepare scripts
  xi:copy-file -f xipki/qa/rest.script-template xipki/qa/rest.script

  xi:copy-file -f xipki/qa/qa.d/ca-load.script-template \
    xipki/qa/qa.d/ca-load.script

  xi:copy-file -f xipki/qa/qa.d/ca.script-template \
    xipki/qa/qa.d/ca.script

  xi:copy-file -f xipki/qa/qa.d/ra.script-template \
    xipki/qa/qa.d/ra.script

  xi:replace --old "REPLACEME-CMP_SIGALGO" --new "$CMP_SIGALGO" \
    xipki/qa/qa.d/ca.script

  dsaPlain = ""

  if { "$SIG_TYPE" equals "PLAINEC" } {
    dsaPlain = "--dsa-plain"
  }

  xi:replace --old "REPLACEME-DSAPLAIN" --new "${dsaPlain}" xipki/qa/rest.script

  xi:replace --old "REPLACEME-DSAPLAIN" --new "${dsaPlain}" \
    xipki/qa/qa.d/ca-load.script

  xi:replace --old "REPLACEME-DSAPLAIN" --new "${dsaPlain}" \
    xipki/qa/qa.d/ca.script

  xi:replace --old "REPLACEME-DSAPLAIN" --new "${dsaPlain}" \
    xipki/qa/qa.d/ra.script

  rsaMgf1 = ""
  if { "$SIG_TYPE" equals "RSAPSS" } {
    rsaMgf1 = "--rsa-mgf1"
  }

  xi:replace --old "REPLACEME-RSAMGF1" --new "${rsaMgf1}" \
    xipki/qa/qa.d/ca-load.script

  xi:replace --old "REPLACEME-RSAMGF1" --new "${rsaMgf1}" \
    xipki/qa/rest.script

  xi:replace --old "REPLACEME-RSAMGF1" --new "${rsaMgf1}" \
    xipki/qa/qa.d/ca.script

  xi:replace --old "REPLACEME-RSAMGF1" --new "${rsaMgf1}" \
    xipki/qa/qa.d/ra.script

  if { "$1" equals "-l" } {
    source file:./xipki/qa/qa.d/ca-load.script
  } {
    source file:./xipki/qa/qa.d/ca.script
  }

  echo "#################################################################"
  echo "#                  CA certificate commands                      #"
  echo "#################################################################"

  #### list certs ####

  ca:list-cert --ca RCA1 --subject "CN=*CA*,O=xipki" --order subject -n 100

  # get the serial number
  SERIAL = $(xi:cert-info --serial --hex --in output/SubCA1.der)

  # save the certificate request
  ca:get-request --ca RCA1 --serial $SERIAL --out output/SubCA1.request

  source file:./xipki/qa/qa.d/ra.script

  source file:./xipki/qa/ca-qa.script

  source file:./xipki/qa/rest.script

  # Force the OCSP responder to import the CRL to database
  xi:copy-file -f xipki/ocsp-config/example/foo.crl.UPDATEME \
    output/SubCAwithCRL1.crl.UPDATEME 
  
  feature:install -r xipki-ocspserver

  source file:./xipki/qa/ocsp.script

  feature:uninstall xipki-ocspserver

}
